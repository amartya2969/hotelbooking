package com.hotel.booking;

import java.awt.CardLayout;
import java.awt.Checkbox;
import java.awt.CheckboxGroup;
import mdlaf.*;
import mdlaf.animation.*;
import java.awt.Component;
import java.awt.Image;
import java.sql.Date;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;
import mdlaf.utils.MaterialColors;
import org.apache.commons.validator.routines.*;

/**
 *
 * @author sohailrajdev
 */
public class Main1 extends javax.swing.JFrame {

    /**
     * Creates new form Main
     */
    User loggedInUser;
    CitiesModel citiesModel;
    HotelsModel hotelsModel;
    AmenitiesModel amenitiesModel;
    BookingsModel bookingsModel;
    WaitingsModel waitingsModel;
    CardLayout cardLayout;
    FeedbacksModel feedbacksModel;
    Hotel selectedHotel;
    ArrayList<Hotel> availableList;
    ArrayList<Hotel> availableHotelRows;
    ArrayList<Hotel> waitingList;
    ArrayList<Hotel> waitingHotelRows;
    ArrayList<Room> singleRoomRows;
    ArrayList<Room> doubleRoomRows;
    ArrayList<Room> familyRoomRows;
    ArrayList<Booking> modifyTableRows;
    Booking selectedBooking;
    int cityId = 0;

    java.sql.Date checkin = new java.sql.Date(0);
    java.sql.Date checkout = new java.sql.Date(0);

    int singleRooms = 0, doubleRooms = 0, familyRooms = 0;
    boolean isSelectedWaiting = false;

    public Main1() throws SQLException {

        initComponents();
        citiesModel = new CitiesModel();
        hotelsModel = new HotelsModel();
        amenitiesModel = new AmenitiesModel();
        bookingsModel = new BookingsModel();
        waitingsModel = new WaitingsModel();
        cardLayout = (CardLayout) MainPanel.getLayout();
        availableHotelRows = new ArrayList<>();
        waitingHotelRows = new ArrayList<>();
        singleRoomRows = new ArrayList<>();
        doubleRoomRows = new ArrayList<>();
        familyRoomRows = new ArrayList<>();
        feedbacksModel = new FeedbacksModel();
        modifyTableRows = new ArrayList<>();

        MaterialUIMovement.add(loginButton, MaterialColors.BLUE_600);
        MaterialUIMovement.add(jButton1, MaterialColors.BLUE_600);
        MaterialUIMovement.add(logoutButton, MaterialColors.BLUE_600);
        MaterialUIMovement.add(cityComboBox, MaterialColors.BLUE_600);
        MaterialUIMovement.add(findButton, MaterialColors.BLUE_600);
        MaterialUIMovement.add(backToSearchBtn, MaterialColors.BLUE_600);
        MaterialUIMovement.add(filterButton, MaterialColors.BLUE_600);
        MaterialUIMovement.add(showHotelListPanelButton, MaterialColors.BLUE_600);
        MaterialUIMovement.add(confirmBookingButton, MaterialColors.BLUE_600);
        MaterialUIMovement.add(manageBookingsButton, MaterialColors.BLUE_600);
        MaterialUIMovement.add(showRoomListBtn, MaterialColors.BLUE_600);
        MaterialUIMovement.add(feedbacksButton, MaterialColors.BLUE_600);
        MaterialUIMovement.add(submitFeedbackButton, MaterialColors.BLUE_600);
        MaterialUIMovement.add(backFromManageButton, MaterialColors.BLUE_600);
        MaterialUIMovement.add(modifyButton, MaterialColors.BLUE_600);
        MaterialUIMovement.add(cancelButton, MaterialColors.BLUE_600);
        MaterialUIMovement.add(backFromModifyButton, MaterialColors.BLUE_600);

        ArrayList<Amenity> amenities = amenitiesModel.getList();
        DefaultTableModel amenitiesTableModel = (DefaultTableModel) amenitiesTable.getModel();
        amenitiesTable.getColumnModel().getColumn(0).setMaxWidth(40);
        amenitiesTable.getColumnModel().getColumn(0).setMinWidth(40);
        for (Amenity amenity : amenities) {
            amenitiesTableModel.addRow(new Object[]{false, amenity.getName()});
        }

        ArrayList<City> cities = citiesModel.getList();

        for (City city : cities) {
            cityComboBox.addItem(city);
        }

    }

    public static void showErrorBox(Component c, String message) {
        JOptionPane.showMessageDialog(c,
                message,
                "Error",
                JOptionPane.ERROR_MESSAGE);
    }

    public static void showSuccessBox(Component c, String message) {
        JOptionPane.showMessageDialog(c,
                message,
                "Success",
                JOptionPane.INFORMATION_MESSAGE);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ErrorBox = new javax.swing.JDialog();
        doubleRoomTable1 = new javax.swing.JTable();
        MainPanel = new javax.swing.JPanel();
        LoginRegisterPanel = new javax.swing.JPanel();
        LoginRegisterTabbedPane = new javax.swing.JTabbedPane();
        LoginPanel = new javax.swing.JPanel();
        usernameField = new javax.swing.JTextField();
        passwordField = new javax.swing.JPasswordField();
        loginButton = new javax.swing.JButton();
        usernameLabel = new javax.swing.JLabel();
        passwordLabel = new javax.swing.JLabel();
        RegisterPanel = new javax.swing.JPanel();
        usernameFieldRegister = new javax.swing.JTextField();
        passwordFieldRegister = new javax.swing.JPasswordField();
        usernameLabelRegister = new javax.swing.JLabel();
        passwordLabelRegister = new javax.swing.JLabel();
        fullNameField = new javax.swing.JTextField();
        fullnameLabelRegister = new javax.swing.JLabel();
        confirmPasswordFieldRegister = new javax.swing.JPasswordField();
        confirmPasswordLabelRegister = new javax.swing.JLabel();
        emailLabel = new javax.swing.JLabel();
        emailField = new javax.swing.JTextField();
        phoneField = new javax.swing.JTextField();
        addressLabel = new javax.swing.JLabel();
        dobLabel = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        dobField = new com.github.lgooddatepicker.components.DatePicker();
        addressField = new javax.swing.JTextField();
        phoneLabel1 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        SearchPanel = new javax.swing.JPanel();
        welcomeLabel = new javax.swing.JLabel();
        cityComboBox = new javax.swing.JComboBox<>();
        checkinDate = new com.github.lgooddatepicker.components.DatePicker();
        checkoutDate = new com.github.lgooddatepicker.components.DatePicker();
        singleSlider = new javax.swing.JSlider();
        familySlider = new javax.swing.JSlider();
        doubleSlider = new javax.swing.JSlider();
        singleLabel = new javax.swing.JLabel();
        doubleLabel = new javax.swing.JLabel();
        familyLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        title1 = new javax.swing.JLabel();
        findButton = new javax.swing.JButton();
        logoutButton = new javax.swing.JButton();
        manageBookingsButton = new javax.swing.JButton();
        HotelListPanel = new javax.swing.JPanel();
        waitingAvailTabbedPane = new javax.swing.JTabbedPane();
        availabelPanel = new javax.swing.JPanel();
        availableScroll = new javax.swing.JScrollPane();
        availableTable = new javax.swing.JTable();
        waitingPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        waitingTable = new javax.swing.JTable();
        backToSearchBtn = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        amenitiesTable = new javax.swing.JTable();
        filterButton = new javax.swing.JButton();
        priceSlider = new javax.swing.JSlider();
        jLabel8 = new javax.swing.JLabel();
        priceLabel = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        RoomListPanel = new javax.swing.JPanel();
        singleRoomScrollPane = new javax.swing.JScrollPane();
        singleRoomTable = new javax.swing.JTable();
        familyRoomScrollPane = new javax.swing.JScrollPane();
        familyRoomTable = new javax.swing.JTable();
        doubleRoomScrollPane = new javax.swing.JScrollPane();
        doubleRoomTable = new javax.swing.JTable();
        singleRoomLabel = new javax.swing.JLabel();
        doubleRoomLabel = new javax.swing.JLabel();
        familyRoomLabel = new javax.swing.JLabel();
        hotelTitle = new javax.swing.JLabel();
        showHotelListPanelButton = new javax.swing.JButton();
        confirmBookingButton = new javax.swing.JButton();
        feedbacksButton = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        aadhaarNumber = new javax.swing.JTextField();
        manageBookingsPanel = new javax.swing.JPanel();
        manageBookingTabbed = new javax.swing.JTabbedPane();
        confirmedPanel = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        confirmedTable = new javax.swing.JTable();
        jLabel9 = new javax.swing.JLabel();
        manageWaitingPanel = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        mangeWaitingTable = new javax.swing.JTable();
        jLabel10 = new javax.swing.JLabel();
        backFromManageButton = new javax.swing.JButton();
        jLabel17 = new javax.swing.JLabel();
        feedbacksPanel = new javax.swing.JPanel();
        hotelFeedbackTitle = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        feedbackTable = new javax.swing.JTable();
        showRoomListBtn = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        rating = new javax.swing.JComboBox<>();
        feedbackComment = new javax.swing.JTextField();
        submitFeedbackButton = new javax.swing.JButton();
        modifyBookingPanel = new javax.swing.JPanel();
        modifyCheckin = new com.github.lgooddatepicker.components.DatePicker();
        modifyCheckout = new com.github.lgooddatepicker.components.DatePicker();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        modifyHotelTitle = new javax.swing.JLabel();
        bookingStringLabel = new javax.swing.JLabel();
        modifyButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        jLabel16 = new javax.swing.JLabel();
        backFromModifyButton = new javax.swing.JButton();
        jLabel18 = new javax.swing.JLabel();

        ErrorBox.setTitle("Error");

        javax.swing.GroupLayout ErrorBoxLayout = new javax.swing.GroupLayout(ErrorBox.getContentPane());
        ErrorBox.getContentPane().setLayout(ErrorBoxLayout);
        ErrorBoxLayout.setHorizontalGroup(
            ErrorBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        ErrorBoxLayout.setVerticalGroup(
            ErrorBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        doubleRoomTable1.setModel(new RoomListTableModel());
        doubleRoomTable1.setMaximumSize(new java.awt.Dimension(1366, 67));
        doubleRoomTable1.setMinimumSize(new java.awt.Dimension(1366, 67));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Hotel Booking System");
        setMinimumSize(new java.awt.Dimension(1366, 768));
        setSize(new java.awt.Dimension(1600, 1200));
        getContentPane().setLayout(new java.awt.CardLayout());

        MainPanel.setLayout(new java.awt.CardLayout());

        LoginRegisterPanel.setLayout(null);

        LoginRegisterTabbedPane.setToolTipText("");

        passwordField.setPreferredSize(new java.awt.Dimension(80, 26));
        passwordField.setSize(new java.awt.Dimension(80, 26));

        loginButton.setText("Login");
        loginButton.setBackground(new java.awt.Color(0, 102, 204));
        loginButton.setForeground(new java.awt.Color(255, 255, 255));
        loginButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                loginButtonMouseClicked(evt);
            }
        });

        usernameLabel.setText("Username");

        passwordLabel.setText("Password");

        javax.swing.GroupLayout LoginPanelLayout = new javax.swing.GroupLayout(LoginPanel);
        LoginPanel.setLayout(LoginPanelLayout);
        LoginPanelLayout.setHorizontalGroup(
            LoginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, LoginPanelLayout.createSequentialGroup()
                .addContainerGap(35, Short.MAX_VALUE)
                .addGroup(LoginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(LoginPanelLayout.createSequentialGroup()
                        .addComponent(usernameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(usernameField, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(LoginPanelLayout.createSequentialGroup()
                        .addComponent(passwordLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(loginButton))
                .addGap(28, 28, 28))
        );
        LoginPanelLayout.setVerticalGroup(
            LoginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LoginPanelLayout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(LoginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(usernameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(usernameField, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(LoginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(passwordLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(loginButton)
                .addGap(494, 494, 494))
        );

        LoginRegisterTabbedPane.addTab("Login", LoginPanel);

        passwordFieldRegister.setPreferredSize(new java.awt.Dimension(80, 26));
        passwordFieldRegister.setSize(new java.awt.Dimension(80, 26));

        usernameLabelRegister.setText("Username");

        passwordLabelRegister.setText("Password");

        fullnameLabelRegister.setText("Full Name");

        confirmPasswordFieldRegister.setPreferredSize(new java.awt.Dimension(80, 26));
        confirmPasswordFieldRegister.setSize(new java.awt.Dimension(80, 26));

        confirmPasswordLabelRegister.setText("Confirm Password");

        emailLabel.setText("Email");

        addressLabel.setText("Address");

        dobLabel.setText("Date of Birth");

        jButton1.setText("Register");
        jButton1.setBackground(new java.awt.Color(0, 102, 204));
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1Clicked(evt);
            }
        });

        phoneLabel1.setText("Phone");

        javax.swing.GroupLayout RegisterPanelLayout = new javax.swing.GroupLayout(RegisterPanel);
        RegisterPanel.setLayout(RegisterPanelLayout);
        RegisterPanelLayout.setHorizontalGroup(
            RegisterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(RegisterPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(RegisterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(RegisterPanelLayout.createSequentialGroup()
                        .addComponent(fullnameLabelRegister, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(fullNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, RegisterPanelLayout.createSequentialGroup()
                        .addComponent(usernameLabelRegister, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(usernameFieldRegister, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(RegisterPanelLayout.createSequentialGroup()
                        .addComponent(passwordLabelRegister, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(passwordFieldRegister, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, RegisterPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(emailLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(57, 57, 57)
                        .addComponent(emailField, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(RegisterPanelLayout.createSequentialGroup()
                        .addComponent(phoneLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(phoneField, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(RegisterPanelLayout.createSequentialGroup()
                        .addComponent(addressLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(addressField, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(RegisterPanelLayout.createSequentialGroup()
                        .addComponent(dobLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(dobField, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(RegisterPanelLayout.createSequentialGroup()
                        .addGroup(RegisterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(confirmPasswordLabelRegister, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(confirmPasswordFieldRegister, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        RegisterPanelLayout.setVerticalGroup(
            RegisterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(RegisterPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(RegisterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fullnameLabelRegister, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fullNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(RegisterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(usernameFieldRegister, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(usernameLabelRegister, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(RegisterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(passwordLabelRegister, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(passwordFieldRegister, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(RegisterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(confirmPasswordLabelRegister, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(confirmPasswordFieldRegister, javax.swing.GroupLayout.DEFAULT_SIZE, 39, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(RegisterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(emailLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(emailField, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(RegisterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(phoneField, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(phoneLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(RegisterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dobField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dobLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(RegisterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addressLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addressField, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addComponent(jButton1)
                .addGap(232, 232, 232))
        );

        LoginRegisterTabbedPane.addTab("Register", RegisterPanel);

        LoginRegisterPanel.add(LoginRegisterTabbedPane);
        LoginRegisterTabbedPane.setBounds(420, 140, 603, 570);
        LoginRegisterTabbedPane.getAccessibleContext().setAccessibleName("");

        jLabel20.setBackground(new java.awt.Color(169, 193, 238));
        jLabel20.setFont(jLabel20.getFont().deriveFont(jLabel20.getFont().getStyle() | java.awt.Font.BOLD, jLabel20.getFont().getSize()+24));
        jLabel20.setForeground(new java.awt.Color(255, 244, 244));
        jLabel20.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel20.setText("Make Your Trip");
        LoginRegisterPanel.add(jLabel20);
        jLabel20.setBounds(3, 30, 1360, 60);

        jLabel19.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hotel/booking/img/bg.jpg"))); // NOI18N
        jLabel19.setText("jLabel19");
        LoginRegisterPanel.add(jLabel19);
        jLabel19.setBounds(0, 0, 1370, 860);

        MainPanel.add(LoginRegisterPanel, "loginRegisterCard");

        welcomeLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        welcomeLabel.setText("Welcome");

        singleSlider.setMaximum(25);
        singleSlider.setValue(0);
        singleSlider.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                singleSliderMouseDragged(evt);
            }
        });
        singleSlider.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                singleSliderMouseDragged(evt);
            }
        });

        familySlider.setMaximum(25);
        familySlider.setValue(0);
        familySlider.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                familySliderMouseDragged(evt);
            }
        });
        familySlider.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                familySliderMouseDragged(evt);
            }
        });

        doubleSlider.setMaximum(25);
        doubleSlider.setValue(0);
        doubleSlider.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                doubleSliderMouseDragged(evt);
            }
        });
        doubleSlider.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                doubleSliderMouseDragged(evt);
            }
        });

        singleLabel.setText("0");
        singleLabel.setFont(singleLabel.getFont().deriveFont(singleLabel.getFont().getSize()+9f));

        doubleLabel.setText("0");
        doubleLabel.setFont(doubleLabel.getFont().deriveFont(doubleLabel.getFont().getSize()+9f));

        familyLabel.setText("0");
        familyLabel.setFont(familyLabel.getFont().deriveFont(familyLabel.getFont().getSize()+9f));

        jLabel1.setText("Single Rooms");

        jLabel2.setText("Double Rooms");

        jLabel3.setText("Family Rooms");

        jLabel4.setText("City");

        jLabel6.setText("Check In Date");

        jLabel7.setText("Check Out Date");

        title1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        title1.setText("Make Your Trip");
        title1.setFont(title1.getFont().deriveFont(title1.getFont().getSize()+35f));

        findButton.setText("Find Hotels");
        findButton.setBackground(new java.awt.Color(0, 102, 204));
        findButton.setForeground(new java.awt.Color(255, 255, 255));
        findButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                findButtonMouseClicked(evt);
            }
        });

        logoutButton.setText("Logout");
        logoutButton.setBackground(new java.awt.Color(0, 102, 204));
        logoutButton.setForeground(new java.awt.Color(255, 255, 255));
        logoutButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                logoutButtonMouseClicked(evt);
            }
        });

        manageBookingsButton.setText("Manage Your Bookings");
        manageBookingsButton.setBackground(new java.awt.Color(0, 102, 204));
        manageBookingsButton.setForeground(new java.awt.Color(255, 255, 255));
        manageBookingsButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                manageBookingsButtonMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout SearchPanelLayout = new javax.swing.GroupLayout(SearchPanel);
        SearchPanel.setLayout(SearchPanelLayout);
        SearchPanelLayout.setHorizontalGroup(
            SearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SearchPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(manageBookingsButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(SearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, SearchPanelLayout.createSequentialGroup()
                        .addGap(0, 112, Short.MAX_VALUE)
                        .addGroup(SearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(SearchPanelLayout.createSequentialGroup()
                                .addGroup(SearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3))
                                .addGap(18, 18, 18)
                                .addGroup(SearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(familySlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(doubleSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(singleSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(findButton))
                                .addGap(18, 18, 18)
                                .addGroup(SearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(familyLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(doubleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(singleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(SearchPanelLayout.createSequentialGroup()
                                .addGroup(SearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cityComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4))
                                .addGap(18, 18, 18)
                                .addGroup(SearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6)
                                    .addComponent(checkinDate, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(title1))
                        .addGap(18, 18, 18)
                        .addGroup(SearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(checkoutDate, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7))
                        .addGap(194, 194, 194))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, SearchPanelLayout.createSequentialGroup()
                        .addComponent(welcomeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(logoutButton)
                        .addContainerGap())))
        );
        SearchPanelLayout.setVerticalGroup(
            SearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, SearchPanelLayout.createSequentialGroup()
                .addGroup(SearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(SearchPanelLayout.createSequentialGroup()
                        .addGap(110, 110, 110)
                        .addComponent(title1))
                    .addGroup(SearchPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(SearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(logoutButton)
                            .addComponent(welcomeLabel)
                            .addComponent(manageBookingsButton))))
                .addGroup(SearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(SearchPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 180, Short.MAX_VALUE)
                        .addGroup(SearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel6)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, SearchPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel7)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(SearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cityComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(checkinDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(checkoutDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(SearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(singleSlider, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(singleLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(55, 55, 55)
                .addGroup(SearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(doubleSlider, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(doubleLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(53, 53, 53)
                .addGroup(SearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(familySlider, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(familyLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(30, 30, 30)
                .addComponent(findButton)
                .addGap(121, 121, 121))
        );

        MainPanel.add(SearchPanel, "searchCard");
        SearchPanel.getAccessibleContext().setAccessibleName("");

        availableTable.setModel(new com.hotel.booking.HotelListTableModel()
        );
        availableTable.setRowHeight(150);
        availableTable.setShowVerticalLines(false);
        availableTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                availableTableMouseClicked(evt);
            }
        });
        availableScroll.setViewportView(availableTable);

        javax.swing.GroupLayout availabelPanelLayout = new javax.swing.GroupLayout(availabelPanel);
        availabelPanel.setLayout(availabelPanelLayout);
        availabelPanelLayout.setHorizontalGroup(
            availabelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(availableScroll, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 998, Short.MAX_VALUE)
        );
        availabelPanelLayout.setVerticalGroup(
            availabelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(availableScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 588, Short.MAX_VALUE)
        );

        waitingAvailTabbedPane.addTab("Available List", availabelPanel);

        waitingTable.setModel(new com.hotel.booking.HotelListTableModel());
        waitingTable.setRowHeight(150);
        waitingTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                waitingTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(waitingTable);

        javax.swing.GroupLayout waitingPanelLayout = new javax.swing.GroupLayout(waitingPanel);
        waitingPanel.setLayout(waitingPanelLayout);
        waitingPanelLayout.setHorizontalGroup(
            waitingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 998, Short.MAX_VALUE)
        );
        waitingPanelLayout.setVerticalGroup(
            waitingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 588, Short.MAX_VALUE)
        );

        waitingAvailTabbedPane.addTab("Waiting List", waitingPanel);

        backToSearchBtn.setText("Back");
        backToSearchBtn.setBackground(new java.awt.Color(0, 102, 204));
        backToSearchBtn.setForeground(new java.awt.Color(255, 255, 255));
        backToSearchBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                backToSearchBtnMouseClicked(evt);
            }
        });

        amenitiesTable.setModel(new CheckBoxTableModel());
        jScrollPane2.setViewportView(amenitiesTable);

        filterButton.setText("Apply Filter");
        filterButton.setBackground(new java.awt.Color(0, 102, 204));
        filterButton.setForeground(new java.awt.Color(255, 255, 255));
        filterButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                filterButtonMouseClicked(evt);
            }
        });

        priceSlider.setMaximum(100000);
        priceSlider.setValue(100000);
        priceSlider.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                priceSliderMouseDragged(evt);
            }
        });
        priceSlider.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                priceSliderMouseDragged(evt);
            }
        });

        jLabel8.setText("Max Price (Per Night)");

        priceLabel.setText("₹100000");
        priceLabel.setFont(priceLabel.getFont().deriveFont(priceLabel.getFont().getSize()+11f));

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Filters");
        jLabel5.setFont(jLabel5.getFont().deriveFont(jLabel5.getFont().getSize()+10f));
        jLabel5.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout HotelListPanelLayout = new javax.swing.GroupLayout(HotelListPanel);
        HotelListPanel.setLayout(HotelListPanelLayout);
        HotelListPanelLayout.setHorizontalGroup(
            HotelListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(HotelListPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(HotelListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(HotelListPanelLayout.createSequentialGroup()
                        .addComponent(backToSearchBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(filterButton))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(priceSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(HotelListPanelLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(HotelListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(HotelListPanelLayout.createSequentialGroup()
                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(priceLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addGap(18, 18, 18)
                .addComponent(waitingAvailTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 1019, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(46, Short.MAX_VALUE))
        );
        HotelListPanelLayout.setVerticalGroup(
            HotelListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, HotelListPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(HotelListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(waitingAvailTabbedPane)
                    .addGroup(HotelListPanelLayout.createSequentialGroup()
                        .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(HotelListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(priceLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(priceSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 455, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(HotelListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(backToSearchBtn)
                            .addComponent(filterButton))))
                .addGap(144, 144, 144))
        );

        waitingAvailTabbedPane.getAccessibleContext().setAccessibleName("Available List");
        waitingAvailTabbedPane.getAccessibleContext().setAccessibleDescription("");

        MainPanel.add(HotelListPanel, "listCard");
        HotelListPanel.getAccessibleContext().setAccessibleDescription("");

        singleRoomTable.setModel(new RoomListTableModel());
        singleRoomTable.setMaximumSize(new java.awt.Dimension(1366, 67));
        singleRoomTable.setMinimumSize(new java.awt.Dimension(1366, 67));
        singleRoomTable.setShowVerticalLines(false);
        singleRoomScrollPane.setViewportView(singleRoomTable);

        familyRoomTable.setModel(new RoomListTableModel());
        familyRoomTable.setMaximumSize(new java.awt.Dimension(1366, 67));
        familyRoomTable.setMinimumSize(new java.awt.Dimension(1366, 67));
        familyRoomTable.setShowVerticalLines(false);
        familyRoomScrollPane.setViewportView(familyRoomTable);

        doubleRoomTable.setModel(new RoomListTableModel());
        doubleRoomTable.setMaximumSize(new java.awt.Dimension(1366, 67));
        doubleRoomTable.setMinimumSize(new java.awt.Dimension(1366, 67));
        doubleRoomTable.setShowVerticalLines(false);
        doubleRoomScrollPane.setViewportView(doubleRoomTable);

        singleRoomLabel.setText("Select Single Rooms");

        doubleRoomLabel.setText("Select Double Rooms");

        familyRoomLabel.setText("Select Family Rooms");

        hotelTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        hotelTitle.setText("Hotel Name");
        hotelTitle.setFont(hotelTitle.getFont().deriveFont(hotelTitle.getFont().getSize()+14f));

        showHotelListPanelButton.setText("Back");
        showHotelListPanelButton.setBackground(new java.awt.Color(0, 102, 204));
        showHotelListPanelButton.setForeground(new java.awt.Color(255, 255, 255));
        showHotelListPanelButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                showHotelListPanelButtonMouseClicked(evt);
            }
        });

        confirmBookingButton.setText("Confirm Booking");
        confirmBookingButton.setBackground(new java.awt.Color(0, 102, 204));
        confirmBookingButton.setForeground(new java.awt.Color(255, 255, 255));
        confirmBookingButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                confirmBookingButtonMouseClicked(evt);
            }
        });

        feedbacksButton.setText("View Feedbacks");
        feedbacksButton.setBackground(new java.awt.Color(0, 102, 204));
        feedbacksButton.setForeground(new java.awt.Color(255, 255, 255));
        feedbacksButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                feedbacksButtonActionPerformed(evt);
            }
        });

        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("Aadhaar Number");

        aadhaarNumber.setToolTipText("");

        javax.swing.GroupLayout RoomListPanelLayout = new javax.swing.GroupLayout(RoomListPanel);
        RoomListPanel.setLayout(RoomListPanelLayout);
        RoomListPanelLayout.setHorizontalGroup(
            RoomListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(RoomListPanelLayout.createSequentialGroup()
                .addGap(611, 611, 611)
                .addComponent(feedbacksButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(singleRoomScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 1372, Short.MAX_VALUE)
            .addGroup(RoomListPanelLayout.createSequentialGroup()
                .addComponent(singleRoomLabel)
                .addGap(0, 1246, Short.MAX_VALUE))
            .addGroup(RoomListPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(RoomListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(familyRoomScrollPane)
                    .addComponent(hotelTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(doubleRoomScrollPane)
                    .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, RoomListPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(aadhaarNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 297, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(517, 517, 517))
                    .addGroup(RoomListPanelLayout.createSequentialGroup()
                        .addGroup(RoomListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(familyRoomLabel)
                            .addComponent(doubleRoomLabel))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(RoomListPanelLayout.createSequentialGroup()
                        .addComponent(showHotelListPanelButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(confirmBookingButton)))
                .addContainerGap())
        );
        RoomListPanelLayout.setVerticalGroup(
            RoomListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, RoomListPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(hotelTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(feedbacksButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(singleRoomLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(singleRoomScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(doubleRoomLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(doubleRoomScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(familyRoomLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(familyRoomScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(aadhaarNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(RoomListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(showHotelListPanelButton)
                    .addComponent(confirmBookingButton))
                .addContainerGap(47, Short.MAX_VALUE))
        );

        MainPanel.add(RoomListPanel, "roomCard");

        confirmedTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Booking ID", "Hotel", "Start Date", "End Date", "Amount Paid"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        confirmedTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                confirmedTableMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(confirmedTable);

        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("Double Click to Modify");

        javax.swing.GroupLayout confirmedPanelLayout = new javax.swing.GroupLayout(confirmedPanel);
        confirmedPanel.setLayout(confirmedPanelLayout);
        confirmedPanelLayout.setHorizontalGroup(
            confirmedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(confirmedPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(confirmedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 1327, Short.MAX_VALUE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        confirmedPanelLayout.setVerticalGroup(
            confirmedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(confirmedPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 541, Short.MAX_VALUE)
                .addContainerGap())
        );

        manageBookingTabbed.addTab("Confirmed", confirmedPanel);

        mangeWaitingTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Waiting ID", "Hotel", "Start Date", "End Date", "Amount Paid"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        mangeWaitingTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                mangeWaitingTableMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(mangeWaitingTable);

        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("Double Click to Cancel");

        javax.swing.GroupLayout manageWaitingPanelLayout = new javax.swing.GroupLayout(manageWaitingPanel);
        manageWaitingPanel.setLayout(manageWaitingPanelLayout);
        manageWaitingPanelLayout.setHorizontalGroup(
            manageWaitingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(manageWaitingPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(manageWaitingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 1327, Short.MAX_VALUE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        manageWaitingPanelLayout.setVerticalGroup(
            manageWaitingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(manageWaitingPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 541, Short.MAX_VALUE)
                .addContainerGap())
        );

        manageBookingTabbed.addTab("Waiting", manageWaitingPanel);

        backFromManageButton.setText("Back");
        backFromManageButton.setBackground(new java.awt.Color(0, 102, 204));
        backFromManageButton.setForeground(new java.awt.Color(255, 255, 255));
        backFromManageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backFromManageButtonActionPerformed(evt);
            }
        });

        jLabel17.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel17.setText("Your Bookings");
        jLabel17.setFont(jLabel17.getFont().deriveFont(jLabel17.getFont().getSize()+19f));

        javax.swing.GroupLayout manageBookingsPanelLayout = new javax.swing.GroupLayout(manageBookingsPanel);
        manageBookingsPanel.setLayout(manageBookingsPanelLayout);
        manageBookingsPanelLayout.setHorizontalGroup(
            manageBookingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(manageBookingsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(manageBookingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(manageBookingTabbed)
                    .addGroup(manageBookingsPanelLayout.createSequentialGroup()
                        .addComponent(backFromManageButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        manageBookingsPanelLayout.setVerticalGroup(
            manageBookingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(manageBookingsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(manageBookingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(backFromManageButton))
                .addGap(69, 69, 69)
                .addComponent(manageBookingTabbed)
                .addContainerGap())
        );

        MainPanel.add(manageBookingsPanel, "manageBookingsCard");

        hotelFeedbackTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        hotelFeedbackTitle.setText("Hotel Name");
        hotelFeedbackTitle.setFont(hotelFeedbackTitle.getFont().deriveFont(hotelFeedbackTitle.getFont().getSize()+14f));

        feedbackTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Feedback", "Rating"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane5.setViewportView(feedbackTable);

        showRoomListBtn.setText("Back");
        showRoomListBtn.setBackground(new java.awt.Color(0, 102, 204));
        showRoomListBtn.setForeground(new java.awt.Color(255, 255, 255));
        showRoomListBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showRoomListBtnActionPerformed(evt);
            }
        });

        jLabel12.setText("Rating");

        jLabel13.setText("Feedback");

        rating.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10" }));

        submitFeedbackButton.setText("Submit");
        submitFeedbackButton.setBackground(new java.awt.Color(0, 102, 204));
        submitFeedbackButton.setForeground(new java.awt.Color(255, 255, 255));
        submitFeedbackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitFeedbackButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout feedbacksPanelLayout = new javax.swing.GroupLayout(feedbacksPanel);
        feedbacksPanel.setLayout(feedbacksPanelLayout);
        feedbacksPanelLayout.setHorizontalGroup(
            feedbacksPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(feedbacksPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(feedbacksPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(hotelFeedbackTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane5)
                    .addGroup(feedbacksPanelLayout.createSequentialGroup()
                        .addComponent(showRoomListBtn)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, feedbacksPanelLayout.createSequentialGroup()
                .addContainerGap(396, Short.MAX_VALUE)
                .addGroup(feedbacksPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(feedbacksPanelLayout.createSequentialGroup()
                        .addGroup(feedbacksPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel13, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel12, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(feedbacksPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rating, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(feedbackComment, javax.swing.GroupLayout.PREFERRED_SIZE, 467, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(submitFeedbackButton))
                .addGap(301, 301, 301))
        );
        feedbacksPanelLayout.setVerticalGroup(
            feedbacksPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(feedbacksPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(hotelFeedbackTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 398, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(feedbacksPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rating, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(feedbacksPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(feedbackComment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(submitFeedbackButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 97, Short.MAX_VALUE)
                .addComponent(showRoomListBtn)
                .addContainerGap())
        );

        MainPanel.add(feedbacksPanel, "feedbackCard");

        jLabel14.setText("Checkin Date");

        jLabel15.setText("Checkout Date");

        modifyHotelTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        modifyHotelTitle.setText("Hotel Name");
        modifyHotelTitle.setFont(modifyHotelTitle.getFont().deriveFont(modifyHotelTitle.getFont().getSize()+19f));

        bookingStringLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        bookingStringLabel.setText("jLabel17");
        bookingStringLabel.setFont(bookingStringLabel.getFont().deriveFont(bookingStringLabel.getFont().getSize()+5f));

        modifyButton.setText("Modify");
        modifyButton.setBackground(new java.awt.Color(0, 102, 204));
        modifyButton.setForeground(new java.awt.Color(255, 255, 255));
        modifyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modifyButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel Booking");
        cancelButton.setBackground(new java.awt.Color(0, 102, 204));
        cancelButton.setForeground(new java.awt.Color(255, 255, 255));
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        jLabel16.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel16.setText("Booking Details");

        backFromModifyButton.setText("Back");
        backFromModifyButton.setBackground(new java.awt.Color(0, 102, 204));
        backFromModifyButton.setForeground(new java.awt.Color(255, 255, 255));
        backFromModifyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backFromModifyButtonActionPerformed(evt);
            }
        });

        jLabel18.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel18.setText("Note : If there is a difference in the number of booking days after the modification, the remaining amount will have to be paid at the hotel counter before checkin.");

        javax.swing.GroupLayout modifyBookingPanelLayout = new javax.swing.GroupLayout(modifyBookingPanel);
        modifyBookingPanel.setLayout(modifyBookingPanelLayout);
        modifyBookingPanelLayout.setHorizontalGroup(
            modifyBookingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(bookingStringLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(modifyBookingPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(modifyBookingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(modifyBookingPanelLayout.createSequentialGroup()
                        .addComponent(jLabel18, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(modifyBookingPanelLayout.createSequentialGroup()
                        .addComponent(modifyHotelTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addComponent(jLabel16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, modifyBookingPanelLayout.createSequentialGroup()
                        .addGap(0, 525, Short.MAX_VALUE)
                        .addGroup(modifyBookingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(modifyBookingPanelLayout.createSequentialGroup()
                                .addComponent(backFromModifyButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(modifyButton)
                                .addGap(26, 26, 26)
                                .addComponent(cancelButton))
                            .addGroup(modifyBookingPanelLayout.createSequentialGroup()
                                .addGroup(modifyBookingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel15))
                                .addGap(61, 61, 61)
                                .addGroup(modifyBookingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(modifyCheckin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(modifyCheckout, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(467, 467, 467))))
        );
        modifyBookingPanelLayout.setVerticalGroup(
            modifyBookingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(modifyBookingPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(modifyHotelTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel16)
                .addGap(115, 115, 115)
                .addComponent(bookingStringLabel)
                .addGap(135, 135, 135)
                .addGroup(modifyBookingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(modifyCheckin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14))
                .addGap(18, 18, 18)
                .addGroup(modifyBookingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(modifyCheckout, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15))
                .addGap(18, 18, 18)
                .addGroup(modifyBookingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(modifyButton)
                    .addComponent(cancelButton)
                    .addComponent(backFromModifyButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 292, Short.MAX_VALUE)
                .addComponent(jLabel18)
                .addContainerGap())
        );

        MainPanel.add(modifyBookingPanel, "modifyCard");

        getContentPane().add(MainPanel, "card4");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1Clicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1Clicked

        String fullName = fullNameField.getText().trim();
        String username = usernameFieldRegister.getText().trim();
        String password = String.valueOf(passwordFieldRegister.getPassword());
        String confirmPassword = String.valueOf(confirmPasswordFieldRegister.getPassword());
        String email = emailField.getText().trim();
        String phone = phoneField.getText().trim();
        String address = addressField.getText().trim();
        String dob = dobField.getText().trim();

        SimpleDateFormat sdf = new SimpleDateFormat("d MMMM, yyyy");
        java.util.Date date = new java.util.Date();

        if (fullName.length() == 0) {
            showErrorBox(RegisterPanel, "Full Name can not be empty");
            return;
        }
        if (username.length() <= 3) {
            showErrorBox(RegisterPanel, "Username should have atleast 4 characters");
            return;
        }
        if (password.length() <= 3) {
            showErrorBox(RegisterPanel, "Password should have atleast 4 characters");
            return;
        }
        if (password.compareTo(confirmPassword) != 0) {
            showErrorBox(RegisterPanel, "Passwords do not match");
            return;
        }

        if (!EmailValidator.getInstance().isValid(email)) {
            showErrorBox(RegisterPanel, "Invalid Email");
            return;
        }

        if (phone.length() != 10) {
            showErrorBox(RegisterPanel, "Phone Number should be 10 digits long");
            return;
        }

        try {
            long x = Long.parseLong(phone);
        } catch (NumberFormatException e) {
            showErrorBox(RegisterPanel, "Invalid Phone Number");
            return;
        }

        try {

            date = sdf.parse(dob);
            if (new java.util.Date().getTime() - date.getTime() < 0) {
                showErrorBox(RegisterPanel, "You can not chose a future DOB.");
                return;
            }
            if (new java.util.Date().getTime() - date.getTime() <= (long) 86400 * 366 * 18 * 1000) {
                showErrorBox(RegisterPanel, "New users should be atleast 18 year old");
                return;
            }

        } catch (Exception e) {
            showErrorBox(RegisterPanel, "Invalid DOB");
        }

        if (address.length() == 0) {
            showErrorBox(RegisterPanel, "Address can not be empty");
            return;
        }

        try {

            User u = new User();
            u.setName(fullName);
            u.setUsername(username);
            u.setPassword(password);
            u.setPhone(phone);
            u.setEmail(email);
            u.setAddress(address);
            u.setDob(new java.sql.Date(date.getTime()));

            int result = u.register();

            switch (result) {
                case 0:
                    showSuccessBox(RegisterPanel, "Registration Successful");
                    break;
                case 1:
                    showErrorBox(RegisterPanel, "Username already exists");
                    break;
                case 2:
                    showErrorBox(RegisterPanel, "Email already exists");
                    break;
                default:
                    break;
            }
            
            Mailer mail = new Mailer(u.getEmail(), "Welcome to Make Your Trip", "Thank you for registering with Make Your Trip. You may login to the portal to avail the booking services.\n\nThanks");

        } catch (SQLException e) {
            showErrorBox(RegisterPanel, "SQL Error");
        }


    }//GEN-LAST:event_jButton1Clicked

    private void loginButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_loginButtonMouseClicked
        String username = usernameField.getText().trim();
        String password = String.valueOf(passwordField.getPassword());

        if (username.length() <= 3) {
            showErrorBox(RegisterPanel, "Username should have atleast 4 characters");
            return;
        }
        if (password.length() <= 3) {
            showErrorBox(RegisterPanel, "Password should have atleast 4 characters");
            return;
        }

        try {
            User u = new User();
            u.setUsername(username);
            u.setPassword(password);
            if (!u.login()) {
                showErrorBox(LoginPanel, "Invalid Username / Password");
            } else {
                loggedInUser = u;
                welcomeLabel.setText("Welcome, " + u.getName());
                cardLayout.show(MainPanel, "searchCard");
            }
        } catch (SQLException e) {
            showErrorBox(RegisterPanel, "SQL Error");
        }
    }//GEN-LAST:event_loginButtonMouseClicked

    private void doubleSliderMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_doubleSliderMouseDragged
        doubleLabel.setText(String.valueOf(doubleSlider.getValue()));
    }//GEN-LAST:event_doubleSliderMouseDragged

    private void familySliderMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_familySliderMouseDragged
        familyLabel.setText(String.valueOf(familySlider.getValue()));
    }//GEN-LAST:event_familySliderMouseDragged

    private void singleSliderMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_singleSliderMouseDragged
        singleLabel.setText(String.valueOf(singleSlider.getValue()));
    }//GEN-LAST:event_singleSliderMouseDragged

    private void logoutButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_logoutButtonMouseClicked
        loggedInUser = null;
        cardLayout.show(MainPanel, "loginRegisterCard");
    }//GEN-LAST:event_logoutButtonMouseClicked

    private void findButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_findButtonMouseClicked

        familyRooms = familySlider.getValue();
        singleRooms = singleSlider.getValue();
        doubleRooms = doubleSlider.getValue();
        cityId = ((City) cityComboBox.getSelectedItem()).getId();

        try {
            SimpleDateFormat sdf = new SimpleDateFormat("d MMMM, yyyy");
            checkin.setTime(sdf.parse(checkinDate.getText().trim()).getTime());
        } catch (ParseException e) {
            showErrorBox(SearchPanel, "Invalid Checkin Date");
            return;
        }

        try {
            SimpleDateFormat sdf = new SimpleDateFormat("d MMMM, yyyy");
            checkout.setTime(sdf.parse(checkoutDate.getText().trim()).getTime());
        } catch (ParseException e) {
            showErrorBox(SearchPanel, "Invalid Checkout Date");
            return;
        }

        if (checkin.getTime() >= checkout.getTime()) {
            showErrorBox(SearchPanel, "Checkout date is before checkin date");
            return;
        }

        if (new java.util.Date().getTime() - checkin.getTime() - 86400000 >= 0) {
            showErrorBox(SearchPanel, "Checkin date can not be in the past");
            return;
        }

        if (singleRooms == 0 && doubleRooms == 0 && familyRooms == 0) {
            showErrorBox(SearchPanel, "Please select atleast one room");
            return;
        }

        generateTables();
        cardLayout.show(MainPanel, "listCard");


    }//GEN-LAST:event_findButtonMouseClicked

    private void backToSearchBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backToSearchBtnMouseClicked
        cardLayout.show(MainPanel, "searchCard");
    }//GEN-LAST:event_backToSearchBtnMouseClicked

    private void priceSliderMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_priceSliderMouseDragged
        priceLabel.setText("₹" + String.valueOf(priceSlider.getValue()));
    }//GEN-LAST:event_priceSliderMouseDragged

    private void filterButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_filterButtonMouseClicked
        generateTables();
    }//GEN-LAST:event_filterButtonMouseClicked

    private void availableTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_availableTableMouseClicked
        if (evt.getClickCount() == 2 && availableTable.getSelectedRow() != -1) {
            int row = availableTable.rowAtPoint(evt.getPoint());
            selectedHotel = availableHotelRows.get(row);
            isSelectedWaiting = false;
            prepareRoomCard();
            cardLayout.show(MainPanel, "roomCard");
        }
    }//GEN-LAST:event_availableTableMouseClicked

    private void showHotelListPanelButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_showHotelListPanelButtonMouseClicked
        cardLayout.show(MainPanel, "listCard");
    }//GEN-LAST:event_showHotelListPanelButtonMouseClicked

    private void waitingTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_waitingTableMouseClicked
        if (evt.getClickCount() == 2 && waitingTable.getSelectedRow() != -1) {
            int row = waitingTable.rowAtPoint(evt.getPoint());
            selectedHotel = waitingHotelRows.get(row);
            isSelectedWaiting = true;
            prepareRoomCard();
            cardLayout.show(MainPanel, "roomCard");
        }
    }//GEN-LAST:event_waitingTableMouseClicked

    private void confirmBookingButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_confirmBookingButtonMouseClicked

        try {
            long l = Long.parseLong(aadhaarNumber.getText());
        } catch (NumberFormatException e) {
            showErrorBox(RoomListPanel, "Inavlid Aadhar Number");
            return;
        }

        if (aadhaarNumber.getText().length() != 12) {
            showErrorBox(RoomListPanel, "Aadhar Number should contain 12 Digits");
            return;
        }

        DefaultTableModel singleModel = (DefaultTableModel) singleRoomTable.getModel();
        DefaultTableModel doubleModel = (DefaultTableModel) doubleRoomTable.getModel();
        DefaultTableModel familyModel = (DefaultTableModel) familyRoomTable.getModel();

        int singleTotal = 0, doubleTotal = 0, familyTotal = 0;
        double bill = 0;
        long numDays = (checkout.getTime() - checkin.getTime()) / 86400000;
        ArrayList< ArrayList<Integer>> map = new ArrayList<>();

        if (singleRooms > 0) {

            for (int i = 0; i < singleModel.getRowCount(); i++) {
                int availableRooms = (Integer) singleModel.getValueAt(i, 3);
                int bookingCount = (Integer) singleModel.getValueAt(i, 4);
                bill += bookingCount * singleRoomRows.get(i).getPrice();

                if (bookingCount > availableRooms && !isSelectedWaiting) {
                    showErrorBox(RoomListPanel, "One of your booking count for single rooms is more than the available count. Please check.");
                    return;
                }

                singleTotal += bookingCount;

                if (bookingCount > 0) {
                    ArrayList<Integer> room = new ArrayList<>();
                    room.add(singleRoomRows.get(i).getId());
                    room.add(bookingCount);
                    map.add(room);
                }
            }

            if (singleTotal != singleRooms) {
                showErrorBox(RoomListPanel, "Please select a total of " + singleRooms + " single rooms.");
                return;
            }

        }

        if (doubleRooms > 0) {

            for (int i = 0; i < doubleModel.getRowCount(); i++) {
                int availableRooms = (Integer) doubleModel.getValueAt(i, 3);
                int bookingCount = (Integer) doubleModel.getValueAt(i, 4);

                bill += bookingCount * doubleRoomRows.get(i).getPrice();

                if (bookingCount > availableRooms && !isSelectedWaiting) {
                    showErrorBox(RoomListPanel, "One of your booking count for double rooms is more than the available count. Please check.");
                    return;
                }

                doubleTotal += bookingCount;

                if (bookingCount > 0) {
                    ArrayList<Integer> room = new ArrayList<>();
                    room.add(doubleRoomRows.get(i).getId());
                    room.add(bookingCount);
                    map.add(room);
                }
            }
            if (doubleTotal != doubleRooms) {
                showErrorBox(RoomListPanel, "Please select a total of " + doubleRooms + " double rooms.");
                return;
            }
        }

        if (familyRooms > 0) {

            for (int i = 0; i < familyModel.getRowCount(); i++) {
                int availableRooms = (Integer) familyModel.getValueAt(i, 3);
                int bookingCount = (Integer) familyModel.getValueAt(i, 4);

                bill += bookingCount * familyRoomRows.get(i).getPrice();

                if (bookingCount > availableRooms && !isSelectedWaiting) {
                    showErrorBox(RoomListPanel, "One of your booking count for family rooms is more than the available count. Please check.");
                    return;
                }

                familyTotal += bookingCount;

                if (bookingCount > 0) {
                    ArrayList<Integer> room = new ArrayList<>();
                    room.add(familyRoomRows.get(i).getId());
                    room.add(bookingCount);
                    map.add(room);
                }
            }

            if (familyTotal != familyRooms) {
                showErrorBox(RoomListPanel, "Please select a total of " + familyRooms + " family rooms.");
                return;
            }

        }

        bill *= numDays;

        if (!isSelectedWaiting) {
            int dialogResult = JOptionPane.showConfirmDialog(null, "Your total bill for the transaction is ₹" + bill + " for " + numDays + " days.\n\nNOTE: You are entitled to pay 50% of this amount now and the remaining at the hotel checkin counter.\nIf you cancel the booking within 3 days of the checkin date, no amount will be refunded.\n\nProceed with the payment of ₹" + bill / 2 + " ?", "Confirm Booking", JOptionPane.YES_NO_OPTION);
            if (dialogResult == JOptionPane.YES_OPTION) {
                try {
                    bookingsModel.create(loggedInUser.getUsername(), checkin, checkout, map);
                    showSuccessBox(RoomListPanel, "Payment Successful !");
                    showSuccessBox(RoomListPanel, "Booking Confirmed !");
                    Mailer m = new Mailer(loggedInUser.getEmail(), "Hotel Booking Confirmed", "Your booking for " + selectedHotel.getName() + " has been confirmed. Please login to MakeYourTrip portal for getting the Booking ID.\n\nRegards,\nMake Your Trip Team");
                    cardLayout.show(MainPanel, "searchCard");
                } catch (SQLException ex) {
                    showErrorBox(RoomListPanel, "SQL Error");
                }
            }

        } else {
            int dialogResult = JOptionPane.showConfirmDialog(null, "Your total bill for the transaction is ₹" + bill + " for " + numDays + " days.\n\nNOTE: You are entitled to pay 50% of this amount now and the remaining at the hotel checkin counter.\nIf your booking in waiting list is confirmed and you cancel the booking within 3 days of the checkin date, no amount will be refunded.\nIf the booking is not confirmed, complete amount will be refunded to your account.\n\nProceed with the payment of ₹" + bill / 2 + " ?", "Confirm Booking", JOptionPane.YES_NO_OPTION);
            if (dialogResult == JOptionPane.YES_OPTION) {
                try {
                    waitingsModel.create(loggedInUser.getUsername(), checkin, checkout, map);
                    showSuccessBox(RoomListPanel, "Payment Successful !");
                    showSuccessBox(RoomListPanel, "Added to waiting list !");
                    Mailer m = new Mailer(loggedInUser.getEmail(), "Waiting List Addition", "You have been added to the waiting list for " + selectedHotel.getName() + " hotel. You will receive an email notification once your booking is confirmed. Please login to MakeYourTrip portal for getting the Waiting List ID.\n\nRegards,\nMake Your Trip Team");
                    cardLayout.show(MainPanel, "searchCard");
                } catch (SQLException ex) {
                    showErrorBox(RoomListPanel, "SQL Error");
                }
            }
        }
    }//GEN-LAST:event_confirmBookingButtonMouseClicked

    private void manageBookingsButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_manageBookingsButtonMouseClicked
        try {
            ArrayList<Booking> bookings = bookingsModel.getByUser(loggedInUser.getUsername());
            modifyTableRows.clear();

            DefaultTableModel confirmModel = (DefaultTableModel) confirmedTable.getModel();
            confirmModel.setRowCount(0);
            for (Booking booking : bookings) {
                confirmModel.addRow(new Object[]{booking.getId(), booking.getHotel().getName(), booking.getStartDate(), booking.getEndDate(), booking.getBill() / 2});
                modifyTableRows.add(booking);
            }

            bookings = waitingsModel.getByUser(loggedInUser.getUsername());
            DefaultTableModel waitingModel = (DefaultTableModel) mangeWaitingTable.getModel();
            waitingModel.setRowCount(0);
            for (Booking booking : bookings) {
                waitingModel.addRow(new Object[]{booking.getId(), booking.getHotel().getName(), booking.getStartDate(), booking.getEndDate(), booking.getBill() / 2});
            }

            cardLayout.show(MainPanel, "manageBookingsCard");

        } catch (SQLException ex) {
            showErrorBox(MainPanel, "SQL Error");
        }


    }//GEN-LAST:event_manageBookingsButtonMouseClicked

    private void mangeWaitingTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mangeWaitingTableMouseClicked
        if (evt.getClickCount() == 2 && mangeWaitingTable.getSelectedRow() != -1) {
            DefaultTableModel waitingModel = (DefaultTableModel) mangeWaitingTable.getModel();
            int row = mangeWaitingTable.rowAtPoint(evt.getPoint());
            try {
                waitingsModel.deleteByPrimaryKey((Integer) waitingModel.getValueAt(row, 0));
                showSuccessBox(manageBookingsPanel, "Booking has been cancelled and the amount paid will be refunded in 3 working days.");
                cardLayout.show(MainPanel, "searchCard");
            } catch (SQLException ex) {
                showErrorBox(manageWaitingPanel, "SQL Error");
            }
        }

    }//GEN-LAST:event_mangeWaitingTableMouseClicked

    private void feedbacksButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_feedbacksButtonActionPerformed
        hotelFeedbackTitle.setText(selectedHotel.getName() + " (" + selectedHotel.getAverageRating() + " / 10 )");
        try {

            ArrayList<Feedback> feedbacks = feedbacksModel.getHotelFeedbacks(selectedHotel.getId());
            DefaultTableModel model = (DefaultTableModel) feedbackTable.getModel();
            model.setRowCount(0);

            for (Feedback feedback : feedbacks) {
                model.addRow(new Object[]{feedback.getComment(), feedback.getRating()});
            }

            cardLayout.show(MainPanel, "feedbackCard");

        } catch (SQLException ex) {
            showErrorBox(feedbacksPanel, "SQL Error");
        }
    }//GEN-LAST:event_feedbacksButtonActionPerformed

    private void showRoomListBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showRoomListBtnActionPerformed
        cardLayout.show(MainPanel, "roomCard");
    }//GEN-LAST:event_showRoomListBtnActionPerformed

    private void submitFeedbackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitFeedbackButtonActionPerformed
        try {
            feedbacksModel.createFeedback(selectedHotel.getId(), Integer.parseInt((String) rating.getSelectedItem()), feedbackComment.getText(), loggedInUser.getUsername());
            Feedback fb = new Feedback();
            generateTables();
            showSuccessBox(feedbacksPanel, "Feedback Submitted");
            cardLayout.show(MainPanel, "listCard");
        } catch (SQLException ex) {
            showErrorBox(feedbacksPanel, "You have already given a feedback for this hotel");
        }
    }//GEN-LAST:event_submitFeedbackButtonActionPerformed

    private void backFromManageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backFromManageButtonActionPerformed
        cardLayout.show(MainPanel, "searchCard");
    }//GEN-LAST:event_backFromManageButtonActionPerformed

    private void confirmedTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_confirmedTableMouseClicked
        if (evt.getClickCount() == 2 && confirmedTable.getSelectedRow() != -1) {
            int row = confirmedTable.rowAtPoint(evt.getPoint());
            selectedBooking = modifyTableRows.get(row);
            modifyHotelTitle.setText(selectedBooking.getHotel().getName());
            bookingStringLabel.setText(selectedBooking.getBookingString());
            modifyCheckin.setDate(selectedBooking.getStartDate().toLocalDate());
            modifyCheckout.setDate(selectedBooking.getEndDate().toLocalDate());
            cardLayout.show(MainPanel, "modifyCard");
        }
    }//GEN-LAST:event_confirmedTableMouseClicked

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        try {
            bookingsModel.deleteByPrimaryKey(selectedBooking.getId());
            if (selectedBooking.getStartDate().getTime() - new java.util.Date().getTime() <= 259200000l) {
                showSuccessBox(modifyBookingPanel, "You canceled the booking after the free-period. No amount will be refunded");
            } else {
                showSuccessBox(modifyBookingPanel, "Your booking amount will be refunded within 3 working days.");
            }
            waitingsModel.clearWaiting();
            showSuccessBox(modifyBookingPanel, "Booking Canceled");
            cardLayout.show(MainPanel, "searchCard");
        } catch (SQLException ex) {
            showErrorBox(modifyBookingPanel, "SQL Error");
        }
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void backFromModifyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backFromModifyButtonActionPerformed
        cardLayout.show(MainPanel, "manageBookingsCard");
    }//GEN-LAST:event_backFromModifyButtonActionPerformed

    private void modifyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modifyButtonActionPerformed
        if (selectedBooking.getStartDate().getTime() - new java.util.Date().getTime() <= 259200000l) {
            showErrorBox(modifyBookingPanel, "You can not modify a booking within 3 days from the checkin date");
            return;
        }
        java.sql.Date newCheckin = new Date(0);
        java.sql.Date newCheckout = new Date(0);
        try {
            SimpleDateFormat sdf = new SimpleDateFormat("d MMMM, yyyy");
            newCheckin.setTime(sdf.parse(modifyCheckin.getText().trim()).getTime());
        } catch (ParseException e) {
            showErrorBox(SearchPanel, "Invalid Checkin Date");
            return;
        }

        try {
            SimpleDateFormat sdf = new SimpleDateFormat("d MMMM, yyyy");
            newCheckout.setTime(sdf.parse(modifyCheckout.getText().trim()).getTime());
        } catch (ParseException e) {
            showErrorBox(SearchPanel, "Invalid Checkout Date");
            return;
        }

        if (newCheckin.getTime() >= newCheckout.getTime()) {
            showErrorBox(SearchPanel, "Checkout date is before checkin date");
            return;
        }

        if (new java.util.Date().getTime() - newCheckin.getTime() - 86400000 >= 0) {
            showErrorBox(SearchPanel, "Checkin date can not be in the past");
            return;
        }
        try {
            if (bookingsModel.modifyBooking(selectedBooking.getId(), newCheckin, newCheckout)) {
                showSuccessBox(modifyBookingPanel, "Booking Modified !");
                cardLayout.show(MainPanel, "searchCard");
            } else {
                showErrorBox(modifyBookingPanel, "Can not modify booking due to unavailability of rooms on the selected date.");
            }
        } catch (SQLException ex) {
            Logger.getLogger(Main1.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_modifyButtonActionPerformed

    public void prepareRoomCard() {

        DefaultTableModel singleModel = (DefaultTableModel) singleRoomTable.getModel();
        DefaultTableModel doubleModel = (DefaultTableModel) doubleRoomTable.getModel();
        DefaultTableModel familyModel = (DefaultTableModel) familyRoomTable.getModel();

        hotelTitle.setText(selectedHotel.getName());

        singleModel.setRowCount(0);
        doubleModel.setRowCount(0);
        familyModel.setRowCount(0);

        singleRoomRows.clear();
        doubleRoomRows.clear();
        familyRoomRows.clear();

        singleRoomLabel.setVisible(true);
        doubleRoomLabel.setVisible(true);
        familyRoomLabel.setVisible(true);

        singleRoomScrollPane.setVisible(true);
        doubleRoomScrollPane.setVisible(true);
        familyRoomScrollPane.setVisible(true);

        if (singleRooms == 0) {
            singleRoomLabel.setVisible(false);
            singleRoomScrollPane.setVisible(false);
        }

        if (doubleRooms == 0) {
            doubleRoomLabel.setVisible(false);
            doubleRoomScrollPane.setVisible(false);
        }

        if (familyRooms == 0) {
            familyRoomLabel.setVisible(false);
            familyRoomScrollPane.setVisible(false);
        }

        if (singleRooms > 0) {
            for (Room room : selectedHotel.getSingleRoomList()) {
                singleModel.addRow(new Object[]{room.getName(), room.getPrice(), room.getAmenities().toString().substring(1, room.getAmenities().toString().length() - 1), room.getAvailableCount(), 0});
                singleRoomRows.add(room);
            }

        }

        if (doubleRooms > 0) {
            for (Room room : selectedHotel.getDoubleRoomList()) {
                doubleModel.addRow(new Object[]{room.getName(), room.getPrice(), room.getAmenities().toString().substring(1, room.getAmenities().toString().length() - 1), room.getAvailableCount(), 0});
                doubleRoomRows.add(room);
            }
        }

        if (familyRooms > 0) {
            for (Room room : selectedHotel.getFamilyRoomList()) {
                familyModel.addRow(new Object[]{room.getName(), room.getPrice(), room.getAmenities().toString().substring(1, room.getAmenities().toString().length() - 1), room.getAvailableCount(), 0});
                familyRoomRows.add(room);
            }
        }

    }

    public boolean checkFilter(Hotel hotel) {
        double price = singleRooms * hotel.getMinimumSinglePrice() + doubleRooms * hotel.getMinimumDoublePrice() + familyRooms * hotel.getMinimumFamilyPrice();

        if (price > priceSlider.getValue()) {
            return false;
        }

        ArrayList<Integer> amenities = new ArrayList<>();

        for (int i = 0; i < amenitiesTable.getRowCount(); i++) {

            if ((Boolean) amenitiesTable.getModel().getValueAt(i, 0)) {
                amenities.add(i + 1);
            }
        }

        return hotel.hasAmenities(amenities);
    }

    public void generateTables() {

        try {
            hotelsModel.generateLists(cityId, singleRooms, doubleRooms, familyRooms, checkin, checkout);
        } catch (SQLException ex) {
            showErrorBox(null, "SQL Error");
        }
        availableList = hotelsModel.getAvailableList();
        waitingList = hotelsModel.getWaitingList();

        DefaultTableModel availableModel = (DefaultTableModel) availableTable.getModel();
        availableModel.setRowCount(0);

        DefaultTableModel waitingModel = (DefaultTableModel) waitingTable.getModel();
        waitingModel.setRowCount(0);

        availableHotelRows.clear();
        waitingHotelRows.clear();

        int i = 0;
        for (Hotel hotel : availableList) {
            if (checkFilter(hotel)) {
                availableHotelRows.add(hotel);
                double price = singleRooms * hotel.getMinimumSinglePrice() + doubleRooms * hotel.getMinimumDoublePrice() + familyRooms * hotel.getMinimumFamilyPrice();
                availableModel.addRow(new Object[]{"image", hotel.getName(), "₹" + price + " Onwards", hotel.getAverageRating() + " / 10", "Double Click to Book"});

                ImageIcon imageIcon = new ImageIcon("F:\\HotelBookingSystem\\src\\com\\hotel\\booking\\img\\" + hotel.getId() + ".jpg");
                Image image = imageIcon.getImage(); // transform it     
                Image newimg = image.getScaledInstance(350, 150, java.awt.Image.SCALE_SMOOTH); // scale it the smooth way  
                imageIcon = new ImageIcon(newimg);  // transform it back

                availableModel.setValueAt(imageIcon, i, 0);
                i++;
            }
        }

        i = 0;

        for (Hotel hotel : waitingList) {
            if (checkFilter(hotel)) {
                waitingHotelRows.add(hotel);
                double price = singleRooms * hotel.getMinimumSinglePrice() + doubleRooms * hotel.getMinimumDoublePrice() + familyRooms * hotel.getMinimumFamilyPrice();
                waitingModel.addRow(new Object[]{"image", hotel.getName(), "₹" + price + " Onwards", hotel.getAverageRating() + " / 10", "Double Click to Book"});

                ImageIcon imageIcon = new ImageIcon("F:\\HotelBookingSystem\\src\\com\\hotel\\booking\\img\\" + hotel.getId() + ".jpg");
                Image image = imageIcon.getImage(); // transform it     
                Image newimg = image.getScaledInstance(350, 150, java.awt.Image.SCALE_SMOOTH); // scale it the smooth way  
                imageIcon = new ImageIcon(newimg);  // transform it back

                waitingModel.setValueAt(imageIcon, i, 0);
                i++;
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Material look and feel */
        try {
            UIManager.setLookAndFeel(new MaterialLookAndFeel());
        } catch (Exception e) {
            e.printStackTrace();
        }
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new Main1().setVisible(true);
                } catch (SQLException ex) {
                    Logger.getLogger(Main1.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDialog ErrorBox;
    private javax.swing.JPanel HotelListPanel;
    private javax.swing.JPanel LoginPanel;
    private javax.swing.JPanel LoginRegisterPanel;
    private javax.swing.JTabbedPane LoginRegisterTabbedPane;
    private javax.swing.JPanel MainPanel;
    private javax.swing.JPanel RegisterPanel;
    private javax.swing.JPanel RoomListPanel;
    private javax.swing.JPanel SearchPanel;
    private javax.swing.JTextField aadhaarNumber;
    private javax.swing.JTextField addressField;
    private javax.swing.JLabel addressLabel;
    private javax.swing.JTable amenitiesTable;
    private javax.swing.JPanel availabelPanel;
    private javax.swing.JScrollPane availableScroll;
    private javax.swing.JTable availableTable;
    private javax.swing.JButton backFromManageButton;
    private javax.swing.JButton backFromModifyButton;
    private javax.swing.JButton backToSearchBtn;
    private javax.swing.JLabel bookingStringLabel;
    private javax.swing.JButton cancelButton;
    private com.github.lgooddatepicker.components.DatePicker checkinDate;
    private com.github.lgooddatepicker.components.DatePicker checkoutDate;
    private javax.swing.JComboBox<City> cityComboBox;
    private javax.swing.JButton confirmBookingButton;
    private javax.swing.JPasswordField confirmPasswordFieldRegister;
    private javax.swing.JLabel confirmPasswordLabelRegister;
    private javax.swing.JPanel confirmedPanel;
    private javax.swing.JTable confirmedTable;
    private com.github.lgooddatepicker.components.DatePicker dobField;
    private javax.swing.JLabel dobLabel;
    private javax.swing.JLabel doubleLabel;
    private javax.swing.JLabel doubleRoomLabel;
    private javax.swing.JScrollPane doubleRoomScrollPane;
    private javax.swing.JTable doubleRoomTable;
    private javax.swing.JTable doubleRoomTable1;
    private javax.swing.JSlider doubleSlider;
    private javax.swing.JTextField emailField;
    private javax.swing.JLabel emailLabel;
    private javax.swing.JLabel familyLabel;
    private javax.swing.JLabel familyRoomLabel;
    private javax.swing.JScrollPane familyRoomScrollPane;
    private javax.swing.JTable familyRoomTable;
    private javax.swing.JSlider familySlider;
    private javax.swing.JTextField feedbackComment;
    private javax.swing.JTable feedbackTable;
    private javax.swing.JButton feedbacksButton;
    private javax.swing.JPanel feedbacksPanel;
    private javax.swing.JButton filterButton;
    private javax.swing.JButton findButton;
    private javax.swing.JTextField fullNameField;
    private javax.swing.JLabel fullnameLabelRegister;
    private javax.swing.JLabel hotelFeedbackTitle;
    private javax.swing.JLabel hotelTitle;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JButton loginButton;
    private javax.swing.JButton logoutButton;
    private javax.swing.JTabbedPane manageBookingTabbed;
    private javax.swing.JButton manageBookingsButton;
    private javax.swing.JPanel manageBookingsPanel;
    private javax.swing.JPanel manageWaitingPanel;
    private javax.swing.JTable mangeWaitingTable;
    private javax.swing.JPanel modifyBookingPanel;
    private javax.swing.JButton modifyButton;
    private com.github.lgooddatepicker.components.DatePicker modifyCheckin;
    private com.github.lgooddatepicker.components.DatePicker modifyCheckout;
    private javax.swing.JLabel modifyHotelTitle;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JPasswordField passwordFieldRegister;
    private javax.swing.JLabel passwordLabel;
    private javax.swing.JLabel passwordLabelRegister;
    private javax.swing.JTextField phoneField;
    private javax.swing.JLabel phoneLabel1;
    private javax.swing.JLabel priceLabel;
    private javax.swing.JSlider priceSlider;
    private javax.swing.JComboBox<String> rating;
    private javax.swing.JButton showHotelListPanelButton;
    private javax.swing.JButton showRoomListBtn;
    private javax.swing.JLabel singleLabel;
    private javax.swing.JLabel singleRoomLabel;
    private javax.swing.JScrollPane singleRoomScrollPane;
    private javax.swing.JTable singleRoomTable;
    private javax.swing.JSlider singleSlider;
    private javax.swing.JButton submitFeedbackButton;
    private javax.swing.JLabel title1;
    private javax.swing.JTextField usernameField;
    private javax.swing.JTextField usernameFieldRegister;
    private javax.swing.JLabel usernameLabel;
    private javax.swing.JLabel usernameLabelRegister;
    private javax.swing.JTabbedPane waitingAvailTabbedPane;
    private javax.swing.JPanel waitingPanel;
    private javax.swing.JTable waitingTable;
    private javax.swing.JLabel welcomeLabel;
    // End of variables declaration//GEN-END:variables
}
